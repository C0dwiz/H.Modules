# Proprietary License Agreement

# Copyright (c) 2024-29 CodWiz

# Permission is hereby granted to any person obtaining a copy of this software and associated documentation files (the "Software"), to use the Software for personal and non-commercial purposes, subject to the following conditions:

# 1. The Software may not be modified, altered, or otherwise changed in any way without the explicit written permission of the author.

# 2. Redistribution of the Software, in original or modified form, is strictly prohibited without the explicit written permission of the author.

# 3. The Software is provided "as is", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose, and non-infringement. In no event shall the author or copyright holder be liable for any claim, damages, or other liability, whether in an action of contract, tort, or otherwise, arising from, out of, or in connection with the Software or the use or other dealings in the Software.

# 4. Any use of the Software must include the above copyright notice and this permission notice in all copies or substantial portions of the Software.

# 5. By using the Software, you agree to be bound by the terms and conditions of this license.

# For any inquiries or requests for permissions, please contact codwiz@yandex.ru.

# ---------------------------------------------------------------------------------
# Name: MooFarmRC1
# Description: –ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ—Ñ–∞—Ä–º–∞ –≤ "–ö–æ—Ä–æ–≤–∫–µ"!
# Author: @hikka_mods and @Frost_Shard
# ---------------------------------------------------------------------------------
# meta developer: @hikka_mods and @Frost_Shard
# scope: MooFarmRC1
# scope: MooFarmRC1 0.0.1
# requires: aioredis
# ---------------------------------------------------------------------------------

__version__ = (0, 1, 4, 10)

import os
import re
import typing
import asyncio
import base64
import aioredis
from typing import Optional
from telethon.tl.types import Message
from telethon.tl.types import InputDocument
from telethon.tl.types import User
from telethon import events
from .. import loader, utils
from ..inline.types import InlineCall
import json

class DebugLogger:

    def __init__(self, client, config):
        self.client = client
        self.config = config

    async def log(self, text: str, category: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        if not self.config["config_debug_msg"]:
            return

        allowed_categories = self.config["config_debug_diff_msg"]
        if category not in allowed_categories:
            return

        await self.client.send_message(
            self.config["config_bot_used_chat_id"],
            f"[{category.upper()}] {text}",
        )

    async def eat(self, text: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –µ–¥—ã."""
        await self.log(text, "Eating")

    async def eat_state(self, text: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –µ–¥—ã."""
        await self.log(text, "Eating_state")

    async def eat_click(self, text: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞ –µ–¥—ã."""
        await self.log(text, "Eating_click")

    async def craft(self, text: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞."""
        await self.log(text, "Crafting")

    async def craft_state(self, text: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—Ä–∞—Ñ—Ç–∞."""
        await self.log(text, "Crafting_state")

    async def craft_click(self, text: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞ –µ–¥—ã."""
        await self.log(text, "Crafting_click")

    async def forest(self, text: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ê–≤—Ç–æ–ª–µ—Å–∞."""
        await self.log(text, "Forest")

    async def forest_state(self, text: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª–µ—Å–∞."""
        await self.log(text, "Forest_state")

    async def forest_click(self, text: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª–µ—Å–Ω–æ–≥–æ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞."""
        await self.log(text, "Forest_click")

    async def forest_npc(self, text: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª–µ—Å–Ω—ã—Ö –Ω–ø—Ü."""
        await self.log(text, "Forest_npc")

    async def general(self, text: str):
        """–û–±—â–∏–π –ª–æ–≥."""
        await self.log(text, "General")

    async def redis(self, text: str):
        """–û–±—â–∏–π –ª–æ–≥ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        await self.log(text, "Redis")

    async def state(self, text: str):
        """–û–±—â–∏–π –ª–æ–≥ —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
        await self.log(text, "State")

@loader.tds
class AutoFarmbotMod(loader.Module):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ—Ñ–∞—Ä–º–∞ –≤ "–ö–æ—Ä–æ–≤–∫–µ"!
    –í –∫–æ–Ω—Ñ–∏–≥–µ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ: —Åhat_id –∏ bot_id ->
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ —Å–∫–∏–Ω –≤ –º–µ–Ω—é ->
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ Redis.io –∏ —Å—Å—ã–ª–∫—É –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω—Ñ–∏–≥

    """
    # Todo: –ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç –∏ –ê–≤—Ç–æ–ª–µ—Å –≥–æ—Ç–æ–≤—ã –Ω–∞ 95%, –∞–≤—Ç–æ—Ö–∞–≤–∫–∞ –Ω–∞ 45%
    strings = {
        "name": "AutoFarmbot",
        # Inline keys
        "auto_eating": "üå∏ –ê–≤—Ç–æ–µ–¥–∞",
        "auto_milk": "ü•õ –ê–≤—Ç–æ–î–æ–π–∫–∞",
        "auto_forest": "üå≥ –ê–≤—Ç–æ–õ–µ—Å",
        "auto_craft": "üß§ –ê–≤—Ç–æ–ö—Ä–∞—Ñ—Ç",
        "settings": "üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "close_btn": "üìÇ –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é",
        "back_btn": "üîô –ù–∞–∑–∞–¥",
        "bot_forest_back": "ü•∫ –∑–∞–±—Ä–∞—Ç—å –ª—É—Ç",
        "bot_forest_go": "üå≤ –≥—É–ª—è—Ç—å",
        "bot_skin_menu_key": "‚≠ê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∏–Ω–∞",
        "on": "‚úÖ –í–∫–ª—é—á–µ–Ω–æ",
        "on_btn": "‚úÖ",
        "off": "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ",
        "off_btn": "‚ùå",
        # main menu
        "moo_menu": "<b>üêÆ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ñ–∞—Ä–º–æ–º:</b>\n\n",
        "auto_forest_menu": "<b>üå≥ –ê–≤—Ç–æ–õ–µ—Å - –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ö–æ–∂–¥–µ–Ω–∏—è –≤ –ª–µ—Å</b>\n",
        "auto_eating_menu": "<b>üå∏ –ê–≤—Ç–æ–µ–¥–∞ - –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è –∫–æ—Ä–æ–≤–∫–∏</b>\n",
        "auto_craft_menu": "<b>üß§ –ê–≤—Ç–æ–ö—Ä–∞—Ñ—Ç - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä–∞—Ñ—Ç –Ω–∞ –≤–µ—Ä—Å—Ç–∞–∫–µ</b>\n",
        "settings_menu": "<b>Ô∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è</b>\n",
        "skin_menu": "<b>‚≠ê –°–∫–∏–Ω - –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–∫–∞–∑–æ–º —Å–∫–∏–Ω–∞</b>\n",
        # Auto forest menu
        "npc_not_skipped": "<i>–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è</i>\n",
        "npc_menu": "<b>üå≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ª–µ—Å–∞:</b>\n\n",
        "npc_menu_autoforest": "üå≤ <b>–ê–≤—Ç–æ–ª–µ—Å:</b>",
        "npc_menu_autoforest_btn": "üå≤ –ê–≤—Ç–æ–ª–µ—Å:",
        "npc_menu_skip_status": "ü¶î <b>–ê–≤—Ç–æ–°–∫–∏–ø –ù–ü–¶:</b>",
        "npc_menu_skip_status_btn": "ü¶î –ê–≤—Ç–æ–°–∫–∏–ø –ù–ü–¶:",
        "npc_menu_skip": "üõ†Ô∏è <b>–ú–µ–Ω—é –ê–≤—Ç–æ—Å–∫–∏–ø–∞:</b> - <i>–í—ã–±–µ—Ä–∏—Ç–µ –ù–ü–¶ –¥–ª—è —Å–∫–∏–ø–∞.</i>",
        "npc_menu_skip_now": "\n<b>üìã –°–µ–π—á–∞—Å —Å–∫–∏–ø–∞—é—Ç—Å—è:</b>\n",
        "npc_autoskip": "üõ†Ô∏è –ú–µ–Ω—é –ê–≤—Ç–æ—Å–∫–∏–ø–∞",
        # skin menu
        "skin_menu_main_txt": "üå´Ô∏è <b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∏–Ω–∞</b>\n\n",
        "skin_menu_show_skin_btn": "üåü –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∫–∏–Ω",
        "skin_menu_sync_skin_btn": "üåü –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∏–Ω",
        "skin_menu_txt": "üß© <b>–°–∫–∏–Ω</b>:",
        "skin_menu_show_txt": "üëÅÔ∏è <b>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å</b>:",
        # eat menu
        "auto_eat_main_menu_txt": "<b>üçΩ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–µ–¥—ã:</b>\n\n",
        "auto_eating_main_menu_txt": "–ê–≤—Ç–æ–µ–¥–∞:",
        "auto_eating_inforest_main_menu_txt": "–í –ª–µ—Å—É:",
        "auto_eating_item": "üç≤ –ü—Ä–µ–¥–º–µ—Ç:",
        "auto_eating_item_count": "üî¢ –ö–æ–ª-–≤–æ:",
        "auto_eating_lvl": "üß¨ –£—Ä–æ–≤–µ–Ω—å –µ–¥—ã:",
        "auto_eating_inline_count": "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∞–≤—Ç–æ-–∫–æ—Ä–º—ë–∂–∫–∏:",
        "auto_eating_inline_lvl": "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ % –µ–¥—ã –∞–≤—Ç–æ-–∫–æ—Ä–º—ë–∂–∫–∏:",
        "auto_eating_inline_item": "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –µ–¥—É –¥–ª—è –∞–≤—Ç–æ-–∫–æ—Ä–º—ë–∂–∫–∏:",
        # forest inline skip menu
        "skip_menu_main_txt": "üß™ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–∏–ø–∞ –ª–µ—Å–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π:",
        "skip_menu_main_on": "‚ùå - –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å",
        "skip_menu_main_off": "‚úÖ - –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å",
        "skip_menu_main_skipped": "<i>‚úÖ  –ø—Ä–æ–ø—É—Å–∫–∞–µ–º</i>",
        # craft inline menu
        "craft_menu_main_txt": "‚öí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç–∞:",
        "craft_menu_main_craft": "–ê–≤—Ç–æ–∫—Ä–∞—Ñ—Ç:",
        "craft_menu_main_craft_item": "üõ† –ü—Ä–µ–¥–º–µ—Ç:",
        "craft_menu_main_craft_count": "üî¢ –ö–æ–ª-–≤–æ:",
        "craft_menu_main_craft_item_inline": "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ-–∫—Ä–∞—Ñ—Ç–∞:",
        "craft_menu_main_craft_count_inline": "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∞–≤—Ç–æ-–∫—Ä–∞—Ñ—Ç–∞:",
        # misc inline menu
        "misc_menu_main_txt": "‚öôÔ∏è –ü—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        "misc_menu_main_debug": "–û—Ç–ª–∞–¥–∫–∞:",
        "misc_menu_main_deletemsg": "–£–¥–∞–ª—è—Ç—å –≤ –±–æ—Ç–µ:",
        "misc_menu_main_logs_chat": "üì§ –ö—É–¥–∞ —Å–ª–∞—Ç—å –ª–æ–≥–∏:",
        "misc_menu_main_logs_chat_inline": "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤:",
        "misc_menu_main_chat_id": "ID —á–∞—Ç–∞:",
        "misc_menu_main_chat_id_inline": "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∞—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:",
        "misc_menu_main_bots_id": "ID –±–æ—Ç–∞(–æ–≤):",
        "misc_menu_main_bots_id_inline": "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
        "misc_menu_main_debug_btn_menu": "üß™ –ö–æ–Ω—Ñ–∏–≥–∏ –æ—Ç–ª–∞–¥–∫–∏",
        # debug inline menu
        "debug_menu_main_txt": "üß™ –ö–æ–Ω—Ñ–∏–≥ Debug Diff Msg:",
        # Debug message
        "Debug_Events_msg_set": "[EVENTS] –£—Å—Ç–∞–Ω–æ–≤–∏–ª —Ö–µ–Ω–¥–ª–µ—Ä—ã.",
        "Debug_Events_msg_del": "[EVENTS] –£–¥–∞–ª–∏–ª —Ö–µ–Ω–¥–ª–µ—Ä—ã.",
        "Debug_craft_take_ok": "[CRAFT] –ó–∞–±—Ä–∞–ª —Å–∫—Ä–∞—Ñ—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã!",
        "Debug_craft_start_ok": "[CRAFT] –û—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞!",
        "Debug_craft_finall_ok": "[CRAFT] –ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –∫—Ä–∞—Ñ—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –∫—Ä–∞—Ñ—Ç!",
        "Debug_craft_job_ok": "[REDIS] –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–∞—Ñ—Ç–æ–º, –æ–±–Ω–æ–≤–∏–ª —Ç–∞–π–º–µ—Ä!",
        "Debug_Events_msg_forest_set": "[EVENTS] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–µ—Å–∞!",
        "Debug_Events_msg_forest_del": "[EVENTS] –£–¥–∞–ª—è—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–µ—Å–∞!",
        "Debug_forest_cow_takeloot_msg": "[FOREST] –ö–æ—Ä–æ–≤–∫–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º!",
        "Debug_forest_cow_takeloot_ok": "[FOREST] –ó–∞–±—Ä–∞–ª –ª—É—Ç!",
        "Debug_forest_cow_go_msg": "[FOREST] –ö–æ—Ä–æ–≤–∫–∞ –Ω–µ –≤ –ª–µ—Å—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º!",
        "Debug_forest_cow_go_ok": "[FOREST] –û—Ç–ø—Ä–∞–≤–∏–ª –∫–æ—Ä–æ–≤–∫—É –≤ –ª–µ—Å!",
        "Debug_forest_job_go_update": "[REDIS] –û–±–Ω–æ–≤–∏–ª —Ç–∞–π–º–µ—Ä –∫–æ—Ä–æ–≤–∫–∏ –≤ –ª–µ—Å—É!",
        "Debug_forest_npc_chick_msg": "[NPC] –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü—ã–ø–æ–π –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É!",
        "Debug_forest_npc_chick_ok": "[NPC] –¶—ã–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!",
        "Debug_forest_npc_ejik_msg": "[NPC] –°–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–∂–∏–∫–æ–º –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É!",
        "Debug_forest_npc_ejik_ok": "[NPC] –ï–∂–∏—Ö–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!",
        "Debug_forest_npc_djun_msg": "[NPC] –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ø—É–≥–∞–µ–º –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É!",
        "Debug_forest_npc_djun_ok": "[NPC] –ü–æ–ø—É–≥–∞–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!",
        "Debug_forest_npc_bear_msg": "[NPC] –°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–≤–µ–¥–µ–º –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É!",
        "Debug_forest_npc_bear_ok": "[NPC] –ú–µ–¥–≤–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!",
        "Debug_forest_npc_jabomraz_msg": "[NPC] –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–∞–±–æ–º—Ä–∞–∑—å—é –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É!",
        "Debug_forest_npc_jabomraz_ok": "[NPC] –ñ–∞–±–æ–º—Ä–∞–∑—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!",
        "Debug_forest_npc_edinorog_msg": "[NPC] –°–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–¥–∏–Ω–æ—Ä–æ–≥–æ–º –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É!",
        "Debug_forest_npc_edinorog_ok": "[NPC] –ï–¥–∏–Ω–æ—Ä–æ–∂–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!",
        "Debug_forest_npc_belka_msg": "[NPC] –°–æ–æ–±—â–µ–Ω–∏–µ —Å –±–µ–ª–∫–æ–π –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É!",
        "Debug_forest_npc_belka_ok": "[NPC] –ë–µ–ª–æ—á–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!",
        # skins
        "config_bot_skin_show": "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∫–∏–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é?\n True - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å,\n False - –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å.",
        "config_bot_skin_strings_id": "ID —Å–∫–∏–Ω–∞",
        "config_bot_skin_strings_hash": "Hash —Å–∫–∏–Ω–∞",
        "config_bot_skin_strings_bytes": "Bytes —Å–∫–∏–Ω–∞",
        # npc
        "config_bot_autoforest_npcs": "–í —Å–ø–∏—Å–∫–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.",
        "npc_jabomraz": "üê∏ –ñ–∞–±–æ–º—Ä–∞–∑—å",
        "npc_chick": "üê§ —Ü—ã–ø–∞",
        "npc_ejik": "üíïü¶î –í–∏–Ω–¥–∏",
        "npc_djun": "ü¶ú –î–∂—É–Ω",
        "npc_djun_farm": "ü¶ú –§–µ—Ä–º–∞ –î–∂—É–Ω–∞",
        "npc_bear": "üêª –¢—ç–¥–¥–∏",
        "npc_edinorog": "ü¶Ñ –ï–¥–∏–Ω–æ—Ä–æ–∂–∫–∞",
        "npc_belka": "üêø –ë–µ–ª–æ—á–∫–∞",
        # Config message
        "config_bot_auto_forest_btn": "üå≥–í—ã–≥—É–ª—è—Ç—å –ö–æ—Ä–æ–≤–∫—É?",
        "config_bot_auto_forest": "üå≥ –í—ã–≥—É–ª–∏–≤–∞—Ç—å –∫–æ—Ä–æ–≤–∫—É?\n  True - –í—ã–≥—É–ª–∏–≤–∞—Ç—å,\n False - –ù–µ –≤—ã–≥—É–ª–∏–≤–∞—Ç—å.",
        "config_bot_auto_forest_skip_npc_btn": "ü¶Ñ –°–∫–∏–ø–∞—Ç—å –ù–ø—Ü?",
        "config_bot_auto_forest_skip_npc": "–°–∫–∏–ø–∞—Ç—å –ù–ø—Ü?\n  True - –°–∫–∏–ø–∞—Ç—å,\n False - –ù–µ —Å–∫–∏–ø–∞—Ç—å.",
        "config_bot_auto_craft": "–ö—Ä–∞—Ñ—Ç–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã?\n True - –ö—Ä–∞—Ñ—Ç–∏—Ç—å,\n False - –ù–µ –∫—Ä–∞—Ñ—Ç–∏—Ç—å.",
        "config_bot_auto_craft_count": "C–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫—Ä–∞—Ñ—Ç–∏—Ç—å (–∑–∞ —Ä–∞–∑)?\n 1-100.",
        "config_bot_auto_craft_item_name": "–í–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –∏—Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç –±—É–¥–µ—Ç –∫—Ä–∞—Ñ—Ç–∏—Ç—å\n"
                                           "–ü—Ä–∏–º–µ—Ä: –º–∞—Å–ª–æ, –∫—É–∫–∏",
        "config_debug_diff_msg": "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ª–æ–≥–æ–≤\n"
                                 "Redis - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö,\n"
                                 "Forest - –ê–≤—Ç–æ–ª–µ—Å,\n"
                                 "Eating - –ê–≤—Ç–æ—Ö–∞–≤–∫–∞,\n"
                                 "Crafting - –ê–≤—Ç–æ–∫—Ä–∞—Ñ,\n"
                                 "State - –•–µ–Ω–¥–ª–µ—Ä—ã\n"
                                 "General - –û–±—â–∏–µ\n",
        "config_bot_auto_eat": "–ö–æ—Ä–º–∏—Ç—å –∫–æ—Ä–æ–≤–∫—É?\n True - –ö–æ—Ä–º–∏—Ç—å,\n False - –ù–µ –∫–æ—Ä–º–∏—Ç—å.",
        "config_bot_auto_eating": "–ö–æ—Ä–º–∏—Ç—å –∫–æ—Ä–æ–≤–∫—É –ø–µ—Ä–µ–¥ –∑–∞–±–∏—Ä–∞–Ω–∏–µ–º –ª—É—Ç–∞(—Å –ª–µ—Å–∞)?\n True - –ö–æ—Ä–º–∏—Ç—å,\n False - –ù–µ –∫–æ—Ä–º–∏—Ç—å.",
        "config_bot_eat_use_count": "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥—É?\n –£–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–≥–æ —á–∏—Å–ª–∞ 0-9.",
        "config_bot_eat_use_item": "–ß–µ–º –∫–æ—Ä–º–∏—Ç—å –∫–æ—Ä–æ–≤–∫—É?\n —Ç—Ä–∞–≤–∫–∞, –±—Ä–æ–∫–∫–æ–ª–∏, –º–æ–ª–æ–∫–æ+, —Ö–æ–ª–ª–∏-—Å—É–ø, –º–∏–ª–∫-—à–µ–π–∫",
        "config_bot_eat_lvl": "–°–æ —Å–∫–æ–ª—å–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å—ã—Ç–æ—Å—Ç–∏ –Ω–∞—á–∏–Ω–∞—Ç—å –∫–æ—Ä–º–∏—Ç—å?\n0-99",
        "config_redis_cloud_link": "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É Redis\n"
                                   "–°—Å—ã–ª–∫—É –±—Ä–∞—Ç—å –Ω–∞ Redis.io",
        "config_debug_msg": "–°–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥—É–ª—è, –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.\n"
                            "–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–µ—Ç–∫–∞–º–∏ [NPC], [DEBUG] –∏ —Ç.–¥.\n"
                            "True - –í–∫–ª—é—á–µ–Ω–æ,\n"
                            "False - –í—ã–∫–ª—é—á–µ–Ω–æ",
        "config_bot_send_logs": "–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–≥–∏?\n"
                                "False - –í—ã–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏,\n"
                                "me - –°–µ–±–µ(–≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ),\n"
                                "default - –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —á–∞—Ç –ª–æ–≥–æ–≤ –º–æ–¥—É–ª—è,\n"
                                "ID - –ª—é–±–æ–π —á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –í—ã —É–∫–∞–∂–∏—Ç–µ.\n",
        "config_bot_deletemsg_inbot": "–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è(—Å–≤–æ–∏) –≤ –±–æ—Ç–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏?\n"
                                      "True< - –£–¥–∞–ª—è—Ç—å,\n"
                                      "False - –ù–µ —É–¥–∞–ª—è—Ç—å.\n",
        "config_bot_used_bot": "username –∏–ª–∏ id –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è,\n–£–∫–∞–∂–∏—Ç–µ —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ:\n"
                               "üíó default - @moolokobot id: 1606812809 - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π,\n"
                               "–õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö:\n"
                               "üíó @moolokobot id: 1606812809 - –û—Å–Ω–æ–≤–Ω–æ–π, –ª–∞–≥–∞–µ—Ç,\n"
                               "üíô @mooloko1bot id: 6467105350 - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π, –ª–∞–≥–∞–µ—Ç,\n"
                               "üíú @mooloko2bot id: 6396922937 - –í—Ç–æ—Ä–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π, –ª–∞–≥–∞–µ—Ç,\n"
                               "ü¶Ñ @ultramoobot id: 5641915741 - –£–ª—å—Ç—Ä–∞, –Ω–µ –ª–∞–≥–∞–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ,\n"
                               "üá∫üá¶ @uamoobot id: 6770881933 - –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π, –Ω–µ –ª–∞–≥–∞–µ—Ç,\n",
        "config_bot_used_chat_id": "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–ª –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –±–æ—Ç–µ, –Ω–æ –∏ –≤ —á–∞—Ç–µ, —É–∫–∞–∂–∏—Ç–µ Chat_id",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "config_debug_diff_msg",
                [],
                self.strings["config_debug_diff_msg"],
                validator=loader.validators.MultiChoice(["Forest", "Forest_click", "Forest_npc", "Forest_state", "Eating", "Eating_click",
                                                         "Eating_state", "Crafting", "Crafting_click", "Craft_state", "Redis", "State", "General"]),
            ),
            loader.ConfigValue(
                "config_debug_msg",
                False,
                self.strings["config_debug_msg"],
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "config_bot_deletemsg_inbot",
                False,
                self.strings["config_bot_deletemsg_inbot"],
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "config_bot_send_logs",
                "me",
                lambda: self.strings["config_bot_send_logs"],
            ),
            loader.ConfigValue(
                "config_redis_cloud_link",
                "redis://default:S50OBWLodXYQHHeLwjWOB9xCxfGyF22H@redis-16447.c246.us-east-1-4.ec2.redns.redis-cloud.com:16447",
                lambda: self.strings["config_redis_cloud_link"],
                validator=loader.validators.Hidden(),
            ),
            loader.ConfigValue(
                "config_bot_used_bot",
                [],
                lambda: self.strings["config_bot_used_bot"],
                #validator=loader.validators.Integer(minimum=0),
                validator=loader.validators.MultiChoice(["1606812809", "6467105350", "6396922937", "5641915741", "6770881933"])
            ),
            loader.ConfigValue(
                "config_bot_used_chat_id",
                "-1001606812809",
                lambda: self.strings["config_bot_used_chat_id"],
                validator=loader.validators.Integer(minimum=-100999999999999999999)
            ),
            loader.ConfigValue(
                "config_bot_auto_eat",
                "False",
                lambda: self.strings["config_bot_auto_eat"],
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "config_bot_auto_eating_forest",
                "False",
                lambda: self.strings["config_bot_auto_eating_forest"],
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "config_bot_eat_use_count",
                "1",
                lambda: self.strings["config_bot_eat_use_count"],
                validator=loader.validators.Integer(minimum=0)
            ),
            loader.ConfigValue(
                "config_bot_eat_use_item",
                "–±—Ä–æ–∫–∫–æ–ª–∏",
                lambda: self.strings["config_bot_eat_use_item"],
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "config_bot_eat_lvl",
                "50",
                lambda: self.strings["config_bot_eat_lvl"],
                validator=loader.validators.Integer(minimum=0)
            ),
            loader.ConfigValue(
                "config_bot_auto_craft",
                "False",
                lambda: self.strings["config_bot_auto_craft"],
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "config_bot_auto_craft_count",
                "50",
                lambda: self.strings["config_bot_auto_craft_count"],
                validator=loader.validators.Integer(minimum=0)
            ),
            loader.ConfigValue(
                "config_bot_auto_craft_item_name",
                "–º–∞—Å–ª–æ",
                lambda: self.strings["config_bot_auto_craft_item_name"],
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "config_bot_auto_forest",
                "False",
                lambda: self.strings["config_bot_auto_forest"],
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "config_bot_auto_forest_skip_npc",
                "True",
                lambda: self.strings["config_bot_auto_forest_skip_npc"],
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "config_bot_autoforest_npcs",
                [],
                lambda: self.strings["config_bot_autoforest_npcs"],
                validator=loader.validators.MultiChoice(
                    ["npc_belka", "npc_jabomraz", "npc_edinorog", "npc_djun", "npc_djun_farm", "npc_chick",
                     "npc_bear", "npc_ejik"]),
            ),
            loader.ConfigValue(
                "config_bot_skin_show",
                "False",
                lambda: self.strings["config_bot_skin_show"],
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "config_bot_skin_strings_id",
                "5395592741939849449",
                lambda: self.strings["config_bot_skin_strings_id"],
            ),
            loader.ConfigValue(
                "config_bot_skin_strings_hash",
                "-7011006528981204019",
                lambda: self.strings["config_bot_skin_strings_hash"],
            ),
            loader.ConfigValue(
                "config_bot_skin_strings_bytes",
                "AQAAClpn9Gn8lOq0lTYlXzF9lctkuIA3lNI=",
                lambda: self.strings["config_bot_skin_strings_bytes"],
            ),
        )

    async def client_ready(self, client, *_):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—å–µ–∫—Ç–æ–≤
        :param client:
        :param _:
        :return:
        """
        self.client = client
        self.db = 0
        self.redis = await aioredis.from_url(self.config["config_redis_cloud_link"],
                                                  encoding="utf-8",
                                                  decode_responses=True,
                                                  db=self.db)

        self.pubsub = self.redis.pubsub()
        self.debug = DebugLogger(self.client, self.config)
        await self.redis.config_set("notify-keyspace-events", "Ex")
        await self.pubsub.subscribe(f'__keyevent@{self.db}__:expired')

    @loader.command()
    async def fmoo(self, message: Message):
        """
        –ò–Ω–ª–∞–π–Ω-–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ñ–∞—Ä–º–æ–º
        """
        chat_id = utils.get_chat_id(message)

        if self.config["config_bot_skin_show"]:
            sticker = InputDocument(
                id=self.config["config_bot_skin_strings_id"],
                access_hash=self.config["config_bot_skin_strings_hash"],
                file_reference = base64.b64decode(self.config["config_bot_skin_strings_bytes"]))

            await self.client.send_file(chat_id, sticker)

        msg, buttons = await self._moobot_info()
        await self.inline.form(
            message=message,
            text=msg,
            reply_markup=buttons
        )

    async def _moobot_info(self):
        """
        Inline –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        :return:
        """
        msg = (f'{self.strings["moo_menu"]}'
               f'\t\t{self.strings["auto_forest_menu"]}'
               f'\t\t{self.strings["auto_eating_menu"]}'
               f'\t\t{self.strings["auto_craft_menu"]}'
               f'\t\t{self.strings["settings_menu"]}'
               f'\t\t{self.strings["skin_menu"]}')
        markup = [
            [
                {"text": self.strings["auto_forest"], "callback": self.inline_forest_menu, "args": ()},
                {"text": self.strings["auto_eating"], "callback": self.inline_eating_menu, "args": ()},
            ],
            [
                {"text": self.strings["auto_craft"], "callback": self.inline_craft_menu, "args": ()},
                {"text": self.strings["settings"], "callback": self.inline_misc_menu, "args": ()},
            ],
            [{"text": self.strings["bot_skin_menu_key"], "callback": self.inline_skin_menu, "args": ()}],
            [{"text": self.strings["close_btn"], "callback": self.close_button, "args": ()}],
        ]
        return msg, markup

    async def moobot_info(self, call:InlineCall):
        """
        Inline –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        :param call:
        :return:
        """
        msg = (f'{self.strings["moo_menu"]}'
               f'\t\t{self.strings["auto_forest_menu"]}'
               f'\t\t{self.strings["auto_eating_menu"]}'
               f'\t\t{self.strings["auto_craft_menu"]}'
               f'\t\t{self.strings["settings_menu"]}'
               f'\t\t{self.strings["skin_menu"]}')
        markup = [
            [
                {"text": self.strings["auto_forest"], "callback": self.inline_forest_menu, "args": (call,)},
                {"text": self.strings["auto_eating"], "callback": self.inline_eating_menu, "args": (call,)},
            ],
            [
                {"text": self.strings["auto_craft"], "callback": self.inline_craft_menu, "args": (call,)},
                {"text": self.strings["settings"], "callback": self.inline_misc_menu, "args": (call,)},
            ],
            [{"text": self.strings["bot_skin_menu_key"], "callback": self.inline_skin_menu, "args": (call,)}],
            [{"text": self.strings["close_btn"], "callback": self.close_button, "args": ()}],
        ]
        await call.edit(msg, reply_markup=markup)

    async def inline_forest_menu(self, call: InlineCall):

        autoforest = f'{self.strings["on"]}' if self.config["config_bot_auto_forest"] else f'{self.strings["off"]}'
        autonpc = f'{self.strings["on"]}' if self.config[
            "config_bot_auto_forest_skip_npc"] else f'{self.strings["off"]}'

        value = self.config["config_bot_autoforest_npcs"]
        categories = [
            "npc_belka", "npc_jabomraz", "npc_edinorog",
            "npc_djun", "npc_djun_farm", "npc_chick",
            "npc_bear", "npc_ejik"
        ]

        skipped_npcs = [self.strings.get(cat, cat) for cat in categories if cat in value]
        skipped_text = "\n".join(
            f'{self.strings["on"]} {npc}' for npc in
            skipped_npcs) if skipped_npcs else f'{self.strings["npc_not_skipped"]}'

        msg = (
                f'{self.strings["npc_menu"]}'
                f'{self.strings["npc_menu_autoforest"]} - <i>{autoforest}</i>\n'
                f'{self.strings["npc_menu_skip_status"]} - <i>{autonpc}</i>\n'
                f'{self.strings["npc_menu_skip"]}'
                f'{self.strings["npc_menu_skip_now"]}' + skipped_text
        )

        markup = [
            [
                {
                    "text": f"{self.strings['npc_menu_autoforest_btn']} {self.strings['on_btn'] if self.config['config_bot_auto_forest'] else self.strings['off_btn']}",
                    "callback": self.toggle_config_and_refresh,
                    "args": ("config_bot_auto_forest", self.inline_forest_menu)
                },
                {
                    "text": f"{self.strings['npc_menu_skip_status_btn']} {self.strings['on_btn'] if self.config['config_bot_auto_forest_skip_npc'] else self.strings['off_btn']}",
                    "callback": self.toggle_config_and_refresh,
                    "args": ("config_bot_auto_forest_skip_npc", self.inline_forest_menu)
                },
            ],
            [
                {
                    "text": self.strings["npc_autoskip"],
                    "callback": self.inline_forest_skip_menu,
                    "args": ()
                }
            ],
            [
                {"text": self.strings["back_btn"], "callback": self.back_button, "args": ()},
                {"text": self.strings["close_btn"], "callback": self.close_button, "args": ()}
            ],
        ]
        await call.edit(msg, reply_markup=markup)

    async def inline_skin_menu(self, call: InlineCall):
        skin_synced = all([
            self.config.get("config_bot_skin_strings_id"),
            self.config.get("config_bot_skin_strings_hash"),
            self.config.get("config_bot_skin_strings_bytes"),
        ])
        skin_show = self.config.get("config_bot_skin_show", False)

        msg = (
            ""
            f"{self.strings['skin_menu_txt']} {self.strings['on'] if skin_synced else self.strings['off']}\n"
            f" {self.strings['skin_menu_show_txt']} {self.strings['on_btn'] if skin_show else self.strings['off_btn']}"
        )

        markup = [
            [
                {
                    "text": f"{self.strings['skin_menu_show_skin_btn']} {self.strings['on_btn'] if skin_show else self.strings['off_btn']}",
                    "callback": self.toggle_config_and_refresh,
                    "args": ("config_bot_skin_show", self.inline_skin_menu)
                }
            ],
            [
                {
                    "text": self.strings["skin_menu_sync_skin_btn"],
                    "callback": self.button_sync_skin,
                    "args": ()
                }
            ],
            [{"text": self.strings["back_btn"], "callback": self.back_button, "args": ()},
             {"text": self.strings["close_btn"], "callback": self.close_button, "args": ()}
             ],
        ]

        await call.edit(msg, reply_markup=markup)

    async def inline_forest_skip_menu(self, call: InlineCall):
        value = self.config["config_bot_autoforest_npcs"]
        categories = [
            "npc_belka", "npc_jabomraz", "npc_edinorog",
            "npc_djun", "npc_djun_farm", "npc_chick",
            "npc_bear", "npc_ejik"
        ]

        msg = (
            f"<b>{self.strings['skip_menu_main_txt']}\n\n"
            f"\t\t{self.strings['skip_menu_main_on']}\n"
            f"\t\t{self.strings['skip_menu_main_off']}</b>\n\n"
        )

        for cat in categories:
            if cat in value:
                display_name = self.strings.get(cat, cat)
                msg += f"{display_name} {self.strings['skip_menu_main_skipped']}\n"

        markup = []
        row = []
        for i, cat in enumerate(categories):
            display_name = self.strings.get(cat, cat)
            mark = f"{self.strings['on_btn']}" if cat in value else f"{self.strings['off_btn']}"

            row.append({
                "text": f"{display_name}: {mark}",
                "callback": self.toggle_multi_choice,
                "args": ("config_bot_autoforest_npcs", cat, self.inline_forest_skip_menu),
            })

            if len(row) == 2 or i == len(categories) - 1:
                markup.append(row)
                row = []

        markup.append([{"text": self.strings["back_btn"], "callback": self.back_forest_button, "args": ()},
                       {"text": self.strings["close_btn"], "callback": self.close_button, "args": ()}
                       ])

        await call.edit(msg, reply_markup=markup)

    async def inline_eating_menu(self, call: InlineCall):
        auto_eat = f'{self.strings["on"]}' if self.config['config_bot_auto_eat'] else f'{self.strings["off"]}'
        eat_forest = f'{self.strings["on"]}' if self.config[
            'config_bot_auto_eating_forest'] else f'{self.strings["off"]}'
        item = self.config['config_bot_eat_use_item']
        count = self.config['config_bot_eat_use_count']
        lvl = self.config['config_bot_eat_lvl']

        msg = (
            f"{self.strings['auto_eat_main_menu_txt']}"
            f"\t\t<b>{self.strings['auto_eating_main_menu_txt']}</b> - <i>{auto_eat}</i>\n\n"
        f"\t\t<b>{self.strings['auto_eating_inforest_main_menu_txt']}</b> - <i>{eat_forest}</i>\n\n"
        f"\t\t<b>{self.strings['auto_eating_item']}</b> - <i>{item}</i>\n\n"
        f"\t\t<b>{self.strings['auto_eating_item_count']}</b> - <i>{count}</i>\n\n"
        f"\t\t<b>{self.strings['auto_eating_lvl']}</b> - <i>{lvl}%</i>\n"
        )

        markup = [
            [
                {
                    "text": f"{self.strings['auto_eating_main_menu_txt']} {self.strings['on_btn'] if self.config['config_bot_auto_eat'] else self.strings['off_btn']}",
                    "callback": self.toggle_config_and_refresh,
                    "args": ("config_bot_auto_eat", self.inline_eating_menu)},
                {
                    "text": f"{self.strings['auto_eating_inforest_main_menu_txt']} {self.strings['on_btn'] if self.config['config_bot_auto_eating_forest'] else self.strings['off_btn']}",
                    "callback": self.toggle_config_and_refresh,
                    "args": ("config_bot_auto_eating_forest", self.inline_eating_menu)},
            ],
            [
                {"text": f"{self.strings['auto_eating_item_count']} {count}",
                 "input": self.strings['auto_eating_inline_count'],
                 "handler": self.ask_config_value_handler,
                 "args": ("config_bot_eat_use_count",)},
                {"text": f"{self.strings['auto_eating_lvl']} - {lvl}%",
                 "input": self.strings['auto_eating_inline_lvl'],
                 "handler": self.ask_config_value_handler,
                 "args": ("config_bot_eat_lvl",)},
            ],
            [
                {"text": f"{self.strings['auto_eating_item']} {item}",
                 "input": self.strings['auto_eating_inline_item'],
                 "handler": self.ask_config_value_handler,
                 "args": ("config_bot_eat_use_item",)},
            ],
            [{"text": self.strings["back_btn"], "callback": self.back_button, "args": ()},
             {"text": self.strings["close_btn"], "callback": self.close_button, "args": ()}
             ],
        ]
        await call.edit(msg, reply_markup=markup)

    async def inline_craft_menu(self, call: InlineCall):
        auto_craft = f'{self.strings["on"] if self.config["config_bot_auto_craft"] else self.strings["off"]}'
        item = self.config['config_bot_auto_craft_item_name']
        count = self.config['config_bot_auto_craft_count']

        msg = (
            f"<b>{self.strings['craft_menu_main_txt']}</b>\n\n"
            f"<b>{self.strings['craft_menu_main_craft']}</b> - <i>{auto_craft}</i>\n"
            f"<b>{self.strings['craft_menu_main_craft_item']}</b> - <code>{item}</code>\n"
            f"<b>{self.strings['craft_menu_main_craft_count']}</b> - <code>{count}</code>"
        )

        markup = [
            [
                {
                    "text": f"{self.strings['craft_menu_main_craft']} {self.strings['on_btn'] if self.config['config_bot_auto_craft'] else self.strings['off_btn']}",
                    "callback": self.toggle_config_and_refresh,
                    "args": ("config_bot_auto_craft", self.inline_craft_menu)},
            ],
            [
                {
                    "text": f"{self.strings['craft_menu_main_craft_item']} {item}",
                    "input": self.strings['craft_menu_main_craft_item_inline'],
                    "handler": self.ask_config_value_handler,
                    "args": ("config_bot_auto_craft_item_name", self.inline_craft_menu),
                }
            ],
            [
                {"text": f"{self.strings['craft_menu_main_craft_count']} {count}",
                 "input": self.strings['craft_menu_main_craft_count_inline'],
                 "handler": self.ask_config_value_handler,
                 "args": ("config_bot_auto_craft_count", self.inline_craft_menu)},
            ],
            [{"text": self.strings["back_btn"], "callback": self.back_button, "args": ()},
             {"text": self.strings["close_btn"], "callback": self.close_button, "args": ()}
             ],
        ]
        await call.edit(msg, reply_markup=markup)

    async def inline_misc_menu(self, call: InlineCall):
        msg = f"<b>{self.strings['misc_menu_main_txt']}</b>"
        markup = [
            [
                {
                    "text": f"{self.strings['misc_menu_main_debug']} {self.strings['on_btn'] if self.config['config_debug_msg'] else self.strings['off_btn']}",
                    "callback": self.toggle_config_and_refresh,
                    "args": ("config_debug_msg", self.inline_misc_menu)},
            ],
            [
                {
                    "text": f"{self.strings['misc_menu_main_deletemsg']} {self.strings['on_btn'] if self.config['config_bot_deletemsg_inbot'] else self.strings['off_btn']}",
                    "callback": self.toggle_config_and_refresh,
                    "args": ("config_bot_deletemsg_inbot", self.inline_misc_menu)},
            ],
            [
                {"text": f"{self.strings['misc_menu_main_logs_chat']} {self.config['config_bot_send_logs']}",
                 "input": self.strings['misc_menu_main_logs_chat_inline'],
                 "handler": self.ask_config_value_handler,
                 "args": ("config_bot_send_logs", self.inline_misc_menu)},
            ],
            [
                {"text": f"{self.strings['misc_menu_main_chat_id']} {self.config['config_bot_used_chat_id']}",
                 "input": self.strings['misc_menu_main_chat_id_inline'],
                 "handler": self.ask_config_value_handler,
                 "args": ("config_bot_used_chat_id", self.inline_misc_menu)},
            ],
            [
                {
                    "text": f"{self.strings['misc_menu_main_bots_id']} {', '.join(self.config['config_bot_used_bot']) or '–ù–µ—Ç'}",
                    "callback": self.inline_bot_select_menu,
                    "args": (call,)
                },
            ],
            [
                {"text": self.strings['misc_menu_main_debug_btn_menu'], "callback": self.inline_debug_menu, "args": ()},
            ],
            [{"text": self.strings["back_btn"], "callback": self.back_button, "args": ()},
             {"text": self.strings["close_btn"], "callback": self.close_button, "args": ()}
             ],
        ]
        await call.edit(msg, reply_markup=markup)

    async def inline_bot_select_menu(self, call: InlineCall, *args):
        msg = "<b>ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞:</b>\n–¢–µ–∫—É—â–∏–π: "
        current = ", ".join(self.config["config_bot_used_bot"]) or "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω"

        msg += f"<code>{current}</code>"

        bots = [
            ("1606812809", "üíó @moolokobot"),
            ("6467105350", "üíô @mooloko1bot"),
            ("6396922937", "üíú @mooloko2bot"),
            ("5641915741", "ü¶Ñ @ultramoobot"),
            ("6770881933", "üá∫üá¶ @uamoobot"),
        ]

        markup = [
            [
                {
                    "text": f"{name} {'‚úÖ' if bot_id in self.config['config_bot_used_bot'] else '‚ùå'}",
                    "callback": self.set_config_bot_used_bot,
                    "args": (bot_id, self.inline_bot_select_menu)
                }
            ] for bot_id, name in bots
        ]

        markup.append([
            {"text": "üóë –û—á–∏—Å—Ç–∏—Ç—å", "callback": self.clear_config_bot_used_bot, "args": (self.inline_bot_select_menu,)},
            {"text": "üîô –ù–∞–∑–∞–¥", "callback": self.inline_misc_menu, "args": ()}
        ])

        await call.edit(msg, reply_markup=markup)

    async def set_config_bot_used_bot(self, call: InlineCall, bot_id: str, refresh_callback, *args):
        self.config["config_bot_used_bot"] = [bot_id]
        await refresh_callback(call)

    async def clear_config_bot_used_bot(self, call: InlineCall, refresh_callback, *args):
        self.config["config_bot_used_bot"] = []
        await refresh_callback(call)

    async def inline_debug_menu(self, call: InlineCall):
        msg = f"<b>{self.strings['debug_menu_main_txt']}</b>"
        value = self.config["config_debug_diff_msg"]
        categories = ["Forest", "Forest_click", "Forest_npc", "Forest_state", "Eating", "Eating_click", "Eating_state",
                      "Crafting", "Crafting_click", "Craft_state", "Redis", "State", "General"]
        markup = []
        row = []
        for i, cat in enumerate(categories):
            row.append({
                "text": f"{cat}: {self.strings['on_btn'] if cat in value else self.strings['off_btn']}",
                "callback": self.toggle_multi_choice,
                "args": ("config_debug_diff_msg", cat, self.inline_debug_menu),
            })
            if len(row) == 2 or i == len(categories) - 1:
                markup.append(row)
                row = []

        markup.append([{"text": self.strings["back_btn"], "callback": self.inline_misc_menu, "args": ()},
                       {"text": self.strings["close_btn"], "callback": self.close_button, "args": ()}
                       ])
        await call.edit(msg, reply_markup=markup)

    async def toggle_config_and_refresh(self, call: InlineCall, key, refresh_func):
        self.config[key] = not self.config[key]
        await refresh_func(call)

    async def ask_config_value_handler(self, call: InlineCall, value: str, key: str, back_func):
        self.config[key] = value
        await back_func(call)

    async def toggle_multi_choice(self, call: InlineCall, config_key: str, value: str, redraw_callback):
        current = list(self.config[config_key])
        if value in current:
            current.remove(value)
        else:
            current.append(value)

        try:
            self.config[config_key] = current
        except Exception as e:
            await call.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            return

        await redraw_callback(call)

    async def syncskin_inline(self, call: InlineCall):
        await call.answer("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å...")

        chat_id = self.get_chat_id
        bot_id = self.config["config_bot_used_bot"]

        msg = await self.client.send_message(chat_id, "/cow")
        start_id = msg.id

        for _ in range(15):
            await asyncio.sleep(1)

            messages = await self.client.get_messages(chat_id, limit=10)
            for m in messages:
                if m.id > start_id and m.sticker:
                    sticker = m.media.document

                    self.config["config_bot_skin_strings_id"] = sticker.id
                    self.config["config_bot_skin_strings_hash"] = sticker.access_hash
                    file_reference_b64 = base64.b64encode(sticker.file_reference).decode()

                    self.config["config_bot_skin_strings_bytes"] = file_reference_b64

                    return await call.answer("‚úÖ –°–∫–∏–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω!")

        await call.answer("‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω ‚Äî –±–æ—Ç –º–æ–ª—á–∏—Ç?")

    async def button_sync_skin(self, call: InlineCall):
        await self.syncskin_inline(call)

    async def back_forest_button(self, call: InlineCall):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ"""
        await call.answer("OK")
        await self.inline_forest_menu(call)

    async def back_button(self, call: InlineCall):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ"""
        await call.answer("OK")
        msg, markup = await self._moobot_info()
        await call.edit(msg, reply_markup=markup)

    @staticmethod
    async def close_button(call: InlineCall):
        await call.answer("–ó–∞–∫—Ä—ã–≤–∞—é...")
        await call.delete()

    @property
    def get_chat_id(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ chat_id –∏ bot_id –≤ –∫–æ–Ω—Ñ–∏–≥–µ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç chat_id, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ bot_id.
        """
        bot_id = self.config["config_bot_used_bot"]
        chat_id = self.config["config_bot_used_chat_id"]

        if chat_id and chat_id != "-100":
            return int(chat_id)

        if bot_id:
            return int(bot_id)

    @loader.command()
    async def auto_eating(self, message):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä–º–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –µ–¥—ã –Ω–∏–∂–µ 70%"""
         #TODO: –ü—Ä–∏–∫—Ä—É—Ç–∏—Ç—å –∫ –∏–Ω–ª–∞–π–Ω-—Ö–µ–Ω–¥–ª–µ—Ä—É
        if not self.config["config_bot_auto_eat"]:
            return
        chat_id = self.get_chat_id

        await self.debug.eat_state(self.strings["Debug_Events_msg_set"])
        self.client.add_event_handler(self.eating_handler, events.NewMessage)
        self.client.add_event_handler(self.eating_handler, events.MessageEdited)

        msg = await self.client.send_message(chat_id, "/cow")
        await self.save_forest_msg(chat_id, "eating_msg", msg)



    async def eating_handler(self, event):
        chat_id = self.get_chat_id
        user_id = self.tg_id
        food = self.config["config_bot_eat_lvl"]
        if event.chat_id != chat_id:
            return

        if not event.is_reply:
            return
        eating_msg = await self.get_forest_msg(chat_id, "eating_msg")
        reply_msg = await event.get_reply_message()

        if not reply_msg or reply_msg.id != eating_msg["id"]:
            return

        text = event.raw_text
        await self.debug.eat(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {text}")

        match = re.search(r"üåø\s*—Ö–∞–≤—á–∏–∫\s*(\d+)%", text)

        if match:
            food_level = int(match.group(1))
            await self.debug.eat(f"[DEBUG] –ù–∞–π–¥–µ–Ω —É—Ä–æ–≤–µ–Ω—å –µ–¥—ã: {food_level}%")

            if food_level <= food:
                await self.save_forest_msg(chat_id, "food", event)
                await self.debug.eat(f"[ACTION] –ï–¥–∞ {food_level}%, –∑–∞–ø—É—Å–∫–∞—é –∫–æ—Ä–º–ª–µ–Ω–∏–µ")
                await self.eating()
            else:
                await self.debug.eat(f"[INFO] –ï–¥—ã {food_level}%, –∫–æ—Ä–º–∏—Ç—å –Ω–µ –Ω–∞–¥–æ")
        elif "üåø –≥–æ–ª–æ–¥–∞–µ—Ç" in text:
            await self.save_forest_msg(chat_id, "food", event)
            await self.debug.eat("[ACTION] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≥–æ–ª–æ–¥–∞–Ω–∏–µ! –ó–∞–ø—É—Å–∫–∞—é –∫–æ—Ä–º–ª–µ–Ω–∏–µ")
            await self.eating()

    async def eating(self):
        """
        –ò—â–µ—Ç –∫–Ω–æ–ø–∫—É '–ë—Ä–æ–∫–∫–æ–ª–∏' –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ—ë eat_use_count —Ä–∞–∑
        """
        use_count = 0
        user_id = self.tg_id
        chat_id = self.get_chat_id
        eat_use_count = self.config["config_bot_eat_use_count"]
        eat_use_item = self.config["config_bot_eat_use_item"]
        msg_data = await self.get_forest_msg(chat_id, "food")
        msg = await self.client.get_messages(chat_id, ids=msg_data["id"])

        if not msg.buttons:
            return await self.debug.eat_click("[EATING] –ö–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        for _ in range(eat_use_count):
            for row in msg.buttons:
                for button in row:
                    if button.data.decode() == f"check_items {user_id}":
                        await msg.click(msg._buttons_flat.index(button))
                        await self.debug.eat_click("[EATING] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'check_items'")
                        await asyncio.sleep(2)

                        msg = await self.client.get_messages(chat_id, ids=msg_data["id"])
                        break

            for row in msg.buttons:
                for button in row:
                    if button.data.decode() == f"itemuse {user_id} {eat_use_item}":
                        await msg.click(msg._buttons_flat.index(button))
                        use_count += 1
                        await self.debug.eat_click(f"[EATING] –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–æ–∫–∫–æ–ª–∏ ({use_count}/{eat_use_count})")
                        await asyncio.sleep(3)
                        if use_count >= eat_use_count:
                            return await self.debug.eat_click("[EATING] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—Ä–æ–∫–∫–æ–ª–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º.")

    @loader.command()
    async def auto_craft_txt(self, message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ-–∫—Ä–∞—Ñ—Ç–∞
        """
        # Todo: –ü—Ä–∏–∫—Ä—É—Ç–∏—Ç—å —ç—Ç–æ –≤—Å–µ –∫ –∏–Ω–ª–∞–π–Ω-—Ö–µ–Ω–¥–ª–µ—Ä—É
        if not self.config["config_bot_auto_craft"]:
            return

        chat_id = self.get_chat_id

        await self.debug.craft_state(self.strings["Debug_Events_msg_set"])
        self.client.add_event_handler(self.craft_handler, events.NewMessage)
        self.client.add_event_handler(self.craft_handler, events.MessageEdited)

        msg = await self.client.send_message(chat_id, "/craft")
        await self.save_forest_msg(chat_id, "craft_msg", msg)

        await self.auto_forest_jobs(20, "del_auto_craft_handlers")

    async def craft_handler(self, event):
        chat_id = self.get_chat_id
        if event.chat_id != chat_id:
            return
        text = event.raw_text

        if "–º–∏–Ω." in text:
            wait_time_match = re.search(r"(?:(\d+)\s*(?:—á–∞—Å(?:–∞|–æ–≤)?|‚è±))?\s*(\d+)\s*–º–∏–Ω\.", text)
            if wait_time_match:
                hours = int(wait_time_match.group(1)) if wait_time_match.group(1) else 0
                minutes = int(wait_time_match.group(2)) if wait_time_match.group(2) else 0
                wait_time = (hours * 60 + minutes) * 60
                wait_time += 2 * 60
                await self.auto_forest_jobs(wait_time, "crafting")
                await self.debug.craft(self.strings["Debug_craft_job_ok"])

        if not event.is_reply:
            return
        craft_msg = await self.get_forest_msg(chat_id, "craft_msg")
        reply_msg = await event.get_reply_message()

        if not reply_msg or reply_msg.id != craft_msg["id"]:
            return

        if "–¢–≤–æ–π –≤–µ—Ä—Å—Ç–∞–∫" in text:
            if "–≥–æ—Ç–æ–≤–æ" in text:
                await self.save_forest_msg(chat_id, "craft_take", event)
                await self.craft_take()

            elif "–ø—É—Å—Ç–æ" in text:
                await self.save_forest_msg(chat_id, "craft_check", event)
                await self.craft_start()

            elif "‚Ä¢50" in text:
                wait_time_match = re.search(r"(?:(\d+)\s*(?:—á–∞—Å(?:–∞|–æ–≤)?|‚è±))?\s*(\d+)\s*–º–∏–Ω\.", text)
                if wait_time_match:
                    hours = int(wait_time_match.group(1)) if wait_time_match.group(1) else 0
                    minutes = int(wait_time_match.group(2)) if wait_time_match.group(2) else 0
                    wait_time = (hours * 60 + minutes) * 60
                    wait_time += 2 * 60
                    await self.auto_forest_jobs(wait_time, "crafting")
                    await self.debug.craft(self.strings["Debug_craft_job_ok"])

        elif "–ß—Ç–æ –±—É–¥–µ–º –∫—Ä–∞—Ñ—Ç–∏—Ç—å" in text:
            await self.save_forest_msg(chat_id, "craft_finall", event)
            await self.craft_finall()

    async def craft_take(self):
        """
        –ò—â–µ—Ç –∫–Ω–æ–ø–∫—É '–ó–∞–±—Ä–∞—Ç—å' –∏ –∑–∞–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥–µ—Ç—ã.
        """
        user_id = self.tg_id
        chat_id = self.get_chat_id
        msg_data = await self.get_forest_msg(chat_id, "craft_take")
        if msg_data:
            msg = await self.client.get_messages(chat_id, ids=msg_data["id"])
            if msg.buttons:
                for row in msg.buttons:
                    for button in row:
                        if button.data.decode() == f"craft {user_id} takeout":
                            await msg.click(msg._buttons_flat.index(button))
                            await self.debug.craft_click(self.strings["Debug_craft_take_ok"])
                            await asyncio.sleep(3)

    async def craft_start(self):
        """
        –ò—â–µ—Ç –∫–Ω–æ–ø–∫—É '–°–∫—Ä–∞—Ñ—Ç–∏—Ç—å' –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –º–µ–Ω—é
        """
        chat_id = self.get_chat_id
        user_id = self.tg_id
        msg_data = await self.get_forest_msg(chat_id, "craft_check")
        if msg_data:
            msg = await self.client.get_messages(chat_id, ids=msg_data["id"])
            if msg.buttons:
                for row in msg.buttons:
                    for button in row:
                        if button.data.decode() == f"craft {user_id} check":
                            await msg.click(msg._buttons_flat.index(button))
                            await self.debug.craft_click(self.strings["Debug_craft_start_ok"])
                            await asyncio.sleep(3)

    async def craft_finall(self):
        """
        –ò—â–µ—Ç –∫–Ω–æ–ø–∫—É '–°–∫—Ä–∞—Ñ—Ç–∏—Ç—å' –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –º–µ–Ω—é
        """
        chat_id = self.get_chat_id
        user_id = self.tg_id
        item_name = self.config["config_bot_auto_craft_item_name"]
        msg_data = await self.get_forest_msg(chat_id, "craft_finall")
        if msg_data:
            msg = await self.client.get_messages(chat_id, ids=msg_data["id"])
            if msg.buttons:
                for row in msg.buttons:
                    for button in row:
                        if button.data.decode().endswith(f"{user_id} f-craft {item_name}"):
                            await msg.click(msg._buttons_flat.index(button))
                            await asyncio.sleep(2)
                            await msg.reply("50")
                            await self.debug.craft_click(self.strings["Debug_craft_finall_ok"])

    @loader.command()
    async def auto_forest_txt(self, message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ-–ª–µ—Å–∞
        """
        if not self.config["config_bot_auto_forest"]:
            return

        chat_id = self.get_chat_id

        if self.config["config_bot_auto_eating_forest"]:
            await self.auto_eating(message)


        self.client.add_event_handler(self.forest_handler, events.NewMessage)
        self.client.add_event_handler(self.forest_handler, events.MessageEdited)
        await self.debug.forest_state(self.strings["Debug_Events_msg_set"])

        msg = await self.client.send_message(chat_id, "/forest")
        await self.save_forest_msg(chat_id, "forest_msg", msg)

        await self.auto_forest_jobs(20, "del_forest_handlers")


    async def forest_handler(self, event):
        chat_id = self.get_chat_id
        if event.chat_id != chat_id:
            return

        if not event.is_reply:
            return
        forest_msg = await self.get_forest_msg(chat_id, "mymsg")

        reply_msg = await event.get_reply_message()
        if not reply_msg and reply_msg.id != forest_msg["id"]:
            return

        text = event.raw_text

        if "–¢–≤–æ—è –∫–æ—Ä–æ–≤–∫–∞ –≥—É–ª—è–µ—Ç" in text:
            wait_time_match = re.search(r"—á–µ—Ä–µ–∑ (?:(\d+) —á–∞—Å(?:–∞|–æ–≤)? )?(\d+) –º–∏–Ω—É—Ç", text)
            if wait_time_match:
                hours = int(wait_time_match.group(1)) if wait_time_match.group(1) else 0
                minutes = int(wait_time_match.group(2))
                wait_time = (hours * 60 + minutes) * 60
                wait_time += 2 * 60
                await self.auto_forest_jobs(wait_time, "takeloot")
                await self.debug.redis(self.strings["Debug_forest_job_go_update"])

        elif "üê§ —Ü—ã–ø–∞" in text:
            if "npc_chick" in self.config["config_bot_autoforest_npcs"]:
                return
            await self.save_forest_msg(chat_id, "chick", event)
            await self.debug.forest_npc(self.strings["Debug_forest_npc_chick_msg"])
            await self.npc_chick()

        elif "üíïü¶î –í–∏–Ω–¥–∏" in text:
            if "npc_ejik" in self.config["config_bot_autoforest_npcs"]:
                return
            await self.save_forest_msg(chat_id, "ejik", event)
            await self.debug.forest_npc(self.strings["Debug_forest_npc_ejik_msg"])
            await self.npc_ejik()

        elif "ü¶ú –î–∂—É–Ω" in text:
            if "npc_djun" in self.config["config_bot_autoforest_npcs"]:
                return
            await self.save_forest_msg(chat_id, "djun", event)
            await self.debug.forest_npc(self.strings["Debug_forest_npc_djun_msg"])
            await self.npc_djun()

        elif "ü¶ú –§–µ—Ä–º–∞ –î–∂—É–Ω–∞" in text:
            if "npc_djun_farm" in self.config["config_bot_autoforest_npcs"]:
                return
            await self.save_forest_msg(chat_id, "djun", event)
            await self.debug.forest_npc(self.strings["Debug_forest_npc_djun_msg"])
            await self.npc_djun()

        elif "üêª –¢—ç–¥–¥–∏" in text:
            if "npc_bear" in self.config["config_bot_autoforest_npcs"]:
                return
            await self.save_forest_msg(chat_id, "bear", event)
            await self.debug.forest_npc(self.strings["Debug_forest_npc_bear_msg"])
            await self.npc_bear()

        elif "üê∏ –ñ–∞–±–æ–º—Ä–∞–∑—å" in text:
            if "npc_jabomraz" in self.config["config_bot_autoforest_npcs"]:
                return
            await self.save_forest_msg(chat_id, "jabomraz", event)
            await self.debug.forest_npc(self.strings["Debug_forest_npc_jabomraz_msg"])
            await self.npc_jabomraz()

        elif "ü¶Ñ –ï–¥–∏–Ω–æ—Ä–æ–∂–∫–∞" in text:
            if "npc_edinorog" in self.config["config_bot_autoforest_npcs"]:
                return
            await self.save_forest_msg(chat_id, "edinorog", event)
            await self.debug.forest_npc(self.strings["Debug_forest_npc_edinorog_msg"])
            await self.npc_edinorog()

        elif "üêø –ë–µ–ª–æ—á–∫–∞" in text:
            if "npc_belka" in self.config["config_bot_autoforest_npcs"]:
                return
            await self.save_forest_msg(chat_id, "belka", event)
            await self.debug.forest_npc(self.strings["Debug_forest_npc_belka_msg"])
            await self.npc_belka()

        elif any(trigger in text for trigger in ["–û—Ç–ø—Ä–∞–≤—å –∫–æ—Ä–æ–≤–∫—É –ø–æ–≥—É–ª—è—Ç—å", "–Ω–µ –∫—É—à–∞–µ—Ç —Ç—Ä–∞–≤–∫—É"]):
            await self.save_forest_msg(chat_id, "go", event)
            await self.debug.forest_npc(self.strings["Debug_forest_cow_go_msg"])
            await self.auto_forest_go()

        elif any(trigger in text for trigger in [
            "–∫–æ—Ä–æ–≤–∫–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å", "–ö–æ—Ä–æ–≤–∫–∞ –ø—Ä–∏—à–ª–∞", "–ø—Ä–∏—à–ª–∞ –¥–æ–º–æ–π", "–ø—Ä–∏—Å–∫–∞–∫–∞–ª–∞", "–ü—Ä–æ–≤–µ—Ä–∏—à—å –ª—É—Ç",
            "–ö–æ—Ä–æ–≤–æ—á–∫–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å", "–≤–µ—Ä–Ω—É–ª–∞—Å—å –∏–∑ –ª–µ—Å–∞", "–∫–æ—Ä–æ–≤–∫–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞"]):
            await self.save_forest_msg(chat_id, "go", event)
            await self.debug.forest_npc(self.strings["Debug_forest_cow_takeloot_msg"])
            await self.auto_forest_takeloot()

    async def auto_forest_go(self):
        """
        –ò—â–µ—Ç –∫–Ω–æ–ø–∫—É '–ì—É–ª—è—Ç—å' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ—Ä–æ–≤–∫—É –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É.
        """
        chat_id = self.get_chat_id
        user_id = self.tg_id
        msg_data = await self.get_forest_msg(chat_id, "go")
        if msg_data:
            msg = await self.client.get_messages(chat_id, ids=msg_data["id"])
            if msg.buttons:
                for row in msg.buttons:
                    for button in row:
                        if button.data.decode() == f"forest {user_id} go":
                            await msg.click(msg._buttons_flat.index(button))
                            await self.redis.delete(f"forest_msg:{chat_id}:go")
                            await self.debug.forest_click(self.strings["Debug_forest_cow_go_ok"])

    async def auto_forest_takeloot(self):
        """
        –ü–æ—Å–ª–µ –ø—Ä–æ–≥—É–ª–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–±—Ä–∞—Ç—å –ª—É—Ç.
        """
        chat_id = self.get_chat_id
        user_id = self.tg_id
        msg_data = await self.get_forest_msg(chat_id, "go")
        if msg_data:
            msg = await self.client.get_messages(chat_id, ids=msg_data["id"])
            if msg.buttons:
                for row in msg.buttons:
                    for button in row:
                        if button.data.decode() == f"forest {user_id} takeloot":
                            await msg.click(msg._buttons_flat.index(button))
                            await self.auto_forest_go()
                            await self.debug.forest_click(self.strings["Debug_forest_cow_takeloot_ok"])

    async def save_forest_msg(self, chat_id, action, msg):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –≤ Redis
        """
        key = f"forest_msg:{chat_id}:{action}"
        data = {"id": msg.id, "text": msg.raw_text}
        await self.redis.set(key, json.dumps(data), ex=30)
        await self.debug.redis(f"[REDIS] –°–æ—Ö—Ä–∞–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ!\n"
                        f"–î–∞–Ω–Ω—ã–µ: {data}")

    async def get_forest_msg(self, chat_id, action):
        """
        –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É
        """
        key = f"forest_msg:{chat_id}:{action}"
        data = await self.redis.get(key)
        if data:
            await self.debug.redis(f"[REDIS] –ü–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞!\n"
                                    f"–ö–ª—é—á: {key}\n"
                                    f"–î–∞–Ω–Ω—ã–µ: {data}")
            return json.loads(data)
        return None


    @loader.loop(interval=1, autostart=True)
    async def listen_to_expired_keys(self):
        """
        –°–≤–æ–µ–æ–±—Ä–∞–∑–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö TTL –∫–ª—é—á–µ–π —Ä–µ–¥–∏—Å–∞.
        –ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ self.handle_expired_key()
        :return:
        """
        async for message in self.pubsub.listen():
            if message["type"] == "message":
                key = message["data"]
                await self.handle_expired_key(key)

    async def handle_expired_key(self, key):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π, —á—Ç–æ–± –Ω–µ –ø—É—Ç–∞—Ç—å - –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è.
        –ö–ª—é—á:–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:–î–µ–π—Å—Ç–≤–∏–µ
        :param key:
        :return:
        """
        parts = key.split(":")
        if len(parts) < 3:
            return

        user_id = parts[1]
        action = parts[2]

        if str(user_id) != str(self.tg_id):
            return

        if action == "takeloot":
            await self.auto_forest_txt(None)

        elif action == "crafting":
            await self.auto_craft_txt(None)

        elif action == "del_forest_handlers":
            self.client.remove_event_handler(self.forest_handler, events.NewMessage)
            self.client.remove_event_handler(self.forest_handler, events.MessageEdited)
            await self.debug.forest_state(self.strings["Debug_Events_msg_del"])

        elif action == "del_auto_craft_handlers":
            self.client.remove_event_handler(self.craft_handler, events.NewMessage)
            self.client.remove_event_handler(self.craft_handler, events.MessageEdited)
            await self.debug.craft_state(self.strings["Debug_Events_msg_del"])

        elif action == "del_auto_eat_handlers":
            self.client.remove_event_handler(self.eating_handler, events.NewMessage)
            self.client.remove_event_handler(self.eating_handler, events.MessageEdited)
            await self.debug.eat_state(self.strings["Debug_Events_msg_del"])

    async def auto_forest_jobs(self, wait_time: int, action: str):
        """
        –°—é–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—Ä–µ–º—è –∏ –∑–∞–¥–∞–Ω–∏–µ, –º—ã –µ–≥–æ –ø–∞–∫—É–µ–º –≤ –∫–ª—é—á –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å TTL –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis.
        :param wait_time:
        :param action:
        :return:
        """
        chat_id = self.config["config_bot_used_chat_id"]
        user_id = self.tg_id
        key = f"forest_task:{user_id}:{action}"
        await self.redis.set(key, "pending", ex=wait_time)
        await self.debug.redis(f"[DEBUG] –¢–∞–π–º–µ—Ä –Ω–∞ {wait_time // 60} –º–∏–Ω—É—Ç –¥–æ {action} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω.")

    async def npc_ejik(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –ù–ü–¶ –ï–∂–∏—Ö–∞.
        """
        chat_id = self.get_chat_id
        user_id = self.tg_id
        msg_data = await self.get_forest_msg(chat_id, "ejik")
        if msg_data:
            msg = await self.client.get_messages(chat_id, ids=msg_data["id"])
            if msg.buttons:
                for row in msg.buttons:
                    for button in row:
                        if button.data.decode() == f"npc_inter {user_id} wind leave":
                            await msg.click(msg._buttons_flat.index(button))
                            await self.debug.forest_npc(self.strings["Debug_forest_npc_ejik_ok"])

    async def npc_bear(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –ù–ü–¶ –ú–µ–¥–≤–µ–¥—è.
        """
        chat_id = self.get_chat_id
        user_id = self.tg_id
        msg_data = await self.get_forest_msg(chat_id, "bear")
        if msg_data:
            msg = await self.client.get_messages(chat_id, ids=msg_data["id"])
            if msg.buttons:
                for row in msg.buttons:
                    for button in row:
                        if button.data.decode() == f"npctrade {user_id} –¢—ç–¥–¥–∏ no":
                            await msg.click(msg._buttons_flat.index(button))
                            await self.debug.forest_npc(self.strings["Debug_forest_npc_bear_ok"])

    async def npc_belka(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –ù–ü–¶ –ë–µ–ª–∫—É.
        """
        chat_id = self.get_chat_id
        user_id = self.tg_id
        msg_data = await self.get_forest_msg(chat_id, "belka")
        if msg_data:
            msg = await self.client.get_messages(chat_id, ids=msg_data["id"])
            if msg.buttons:
                for row in msg.buttons:
                    for button in row:
                        if button.data.decode() == f"npctrade {user_id} –ë–µ–ª–æ—á–∫–∞ no":
                            await msg.click(msg._buttons_flat.index(button))
                            await self.debug.forest_npc(self.strings["Debug_forest_npc_belka_ok"])

    async def npc_djun_farm(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –ù–ü–¶ –§–µ—Ä–º—ã –ü–æ–ø—É–≥–∞—è.
        """
        chat_id = self.get_chat_id
        user_id = self.tg_id
        msg_data = await self.get_forest_msg(chat_id, "djun_farm")
        if msg_data:
            msg = await self.client.get_messages(chat_id, ids=msg_data["id"])
            if msg.buttons:
                for row in msg.buttons:
                    for button in row:
                        if button.data.decode() == f"npc_inter {user_id} goaway home":
                            await msg.click(msg._buttons_flat.index(button))
                            await self.debug.forest_npc(self.strings["Debug_forest_npc_djun_ok"])

    async def npc_djun(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –ù–ü–¶ –ü–æ–ø—É–≥–∞—è.
        """
        chat_id = self.get_chat_id
        user_id = self.tg_id
        msg_data = await self.get_forest_msg(chat_id, "djun")
        if msg_data:
            msg = await self.client.get_messages(chat_id, ids=msg_data["id"])
            if msg.buttons:
                for row in msg.buttons:
                    for button in row:
                        if button.data.decode() == f"npc_inter {user_id} djun no":
                            await msg.click(msg._buttons_flat.index(button))
                            await self.debug.forest_npc(self.strings["Debug_forest_npc_djun_ok"])

    async def npc_edinorog(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –ù–ü–¶ –ï–¥–∏–Ω–æ—Ä–æ–∂–∫–∞.
        """
        chat_id = self.get_chat_id
        user_id = self.tg_id
        msg_data = await self.get_forest_msg(chat_id, "edinorog")
        if msg_data:
            msg = await self.client.get_messages(chat_id, ids=msg_data["id"])
            if msg.buttons:
                for row in msg.buttons:
                    for button in row:
                        if button.data.decode() == f"npctrade {user_id} –ï–¥–∏–Ω–æ—Ä–æ–∂–∫–∞ no":
                            await msg.click(msg._buttons_flat.index(button))
                            await self.debug.forest_npc(self.strings["Debug_forest_npc_edinorog_ok"])

    async def npc_jabomraz(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –ù–ü–¶ –ñ–∞–±–æ–º—Ä–∞–∑—å.
        """
        chat_id = self.get_chat_id
        user_id = self.tg_id
        msg_data = await self.get_forest_msg(chat_id, "jabomraz")
        if msg_data:
            msg = await self.client.get_messages(chat_id, ids=msg_data["id"])
            if msg.buttons:
                for row in msg.buttons:
                    for button in row:
                        if button.data.decode() == f"npctrade {user_id} –ñ–∞–±–æ–º—Ä–∞–∑—å no":
                            await msg.click(msg._buttons_flat.index(button))
                            await self.debug.forest_npc(self.strings["Debug_forest_npc_jabomraz_ok"])

    async def npc_chick(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –ù–ü–¶ –¶—ã–ø–∞.
        """
        chat_id = self.get_chat_id
        user_id = self.tg_id
        msg_data = await self.get_forest_msg(chat_id, "chick")
        if msg_data:
            msg = await self.client.get_messages(chat_id, ids=msg_data["id"])
            if msg.buttons:
                for row in msg.buttons:
                    for button in row:
                        if button.data.decode() == f"npc_inter {user_id} chick catch":
                            await msg.click(msg._buttons_flat.index(button))
                            await self.debug.forest_npc(self.strings["Debug_forest_npc_chick_ok"])

